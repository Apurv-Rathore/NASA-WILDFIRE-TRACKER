{"version":3,"sources":["components/LocationMarker.js","components/Map.js","components/loader.gif","components/Loader.js","App.js","reportWebVitals.js","index.js"],"names":["LocationMarker","lat","lng","onClick","type","className","icon","locationIconFire","locationIconStorm","Map","eventData","center","zoom","eventMarkers","map","data","categories","id","geometries","coordinates","bootstrapURLKeys","key","defaultCenter","defaultZoom","defaultProps","Loader","src","loader","App","useState","setEventData","loading","setLoading","useEffect","a","fetch","res","json","events","fetchEvents","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0RAceA,EARQ,SAAC,GAA2B,EAA1BC,IAA0B,EAAtBC,IAAuB,IAAnBC,EAAkB,EAAlBA,QAAQC,EAAU,EAAVA,KACrC,OACI,qBAAKC,UAAU,kBAAkBF,QAASA,EAA1C,SAEI,cAAC,OAAD,CAAMG,KAAa,IAAPF,EAASG,IAAiBC,IAAmBH,UAAS,uBAAkBD,QCP1FK,EAAM,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,KAC1BC,EAAeH,EAAUI,KAAI,SAACC,GAClC,OAA8B,IAA1BA,EAAKC,WAAW,GAAGC,IAAsC,KAA1BF,EAAKC,WAAW,GAAGC,GAElD,cAAC,EAAD,CACEhB,IAAKc,EAAKG,WAAW,GAAGC,YAAY,GACpCjB,IAAKa,EAAKG,WAAW,GAAGC,YAAY,GACpCf,KAAMW,EAAKC,WAAW,GAAGC,KAIxB,QAET,OACE,qBAAKZ,UAAU,MAAf,SACE,cAAC,IAAD,CACEe,iBAAkB,CAAEC,IAAK,2CACzBC,cAAeX,EACfY,YAAaX,EAHf,SAKKC,OAMXJ,EAAIe,aAAe,CACjBb,OAAQ,CACNV,IAAK,QACLC,KAAM,UAERU,KAAM,GAGOH,QCrCA,MAA0B,mCCW1BgB,EATA,WACX,OACI,sBAAKpB,UAAU,SAAf,UACI,qBAAKqB,IAAKC,IACV,mDCuBGC,MAzBf,WACE,MAAkCC,mBAAS,IAA3C,mBAAOnB,EAAP,KAAkBoB,EAAlB,KACA,EAA8BD,oBAAS,GAAvC,mBAAOE,EAAP,KAAgBC,EAAhB,KAeA,OAbAC,qBAAU,YACS,uCAAG,gCAAAC,EAAA,6DAClBF,GAAW,GADO,SAEAG,MAAM,mDAFN,cAEZC,EAFY,gBAGOA,EAAIC,OAHX,gBAGVC,EAHU,EAGVA,OAERR,EAAaQ,GACbN,GAAW,GANO,4CAAH,qDASjBO,KACC,IAGD,8BAEKR,EAA0C,cAAC,EAAD,IAAhC,cAAC,EAAD,CAAKrB,UAAWA,OCZpB8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.fb087da1.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Icon} from \"@iconify/react\"\r\nimport locationIconFire from \"@iconify/icons-mdi/fire-alert\"\r\nimport locationIconStorm from \"@iconify/icons-mdi/weather-lightning-rainy\"\r\n\r\n\r\nconst LocationMarker = ({lat,lng,onClick,type}) => {\r\n    return (\r\n        <div className=\"location-marker\" onClick={onClick}>\r\n\r\n            <Icon icon={type===8?locationIconFire:locationIconStorm} className={`location-icon${type}`}></Icon>\r\n        </div>\r\n    )\r\n}\r\nexport default LocationMarker;\r\n","import GoogleMapReact from \"google-map-react\";\r\nimport LocationMarker from \"./LocationMarker\";\r\n\r\nconst Map = ({ eventData, center, zoom }) => {\r\n  const eventMarkers = eventData.map((data) => {\r\n    if (data.categories[0].id === 8 || data.categories[0].id === 10) {\r\n      return (\r\n        <LocationMarker\r\n          lat={data.geometries[0].coordinates[1]}\r\n          lng={data.geometries[0].coordinates[0]}\r\n          type={data.categories[0].id}\r\n        ></LocationMarker>\r\n      );\r\n    }\r\n    return null;\r\n  });\r\n  return (\r\n    <div className=\"map\">\r\n      <GoogleMapReact\r\n        bootstrapURLKeys={{ key: \"AIzaSyCzDoeDy1SH-BYVf7pwDdw3t_ahm7QOCYU\" }}\r\n        defaultCenter={center}\r\n        defaultZoom={zoom}\r\n      >\r\n          {eventMarkers}\r\n      </GoogleMapReact>\r\n    </div>\r\n  );\r\n};\r\n\r\nMap.defaultProps = {\r\n  center: {\r\n    lat: 42.3265,\r\n    lng: -122.8756,\r\n  },\r\n  zoom: 6,\r\n};\r\n\r\nexport default Map;\r\n","export default __webpack_public_path__ + \"static/media/loader.ac97dfd6.gif\";","import loader from \"./loader.gif\"\r\n\r\nconst Loader = () => {\r\n    return (\r\n        <div className=\"loader\">\r\n            <img src={loader}></img>\r\n            <h1>Fetching Data</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loader;","import { useState, useEffect } from 'react'\nimport Map from './components/Map'\nimport Loader from './components/Loader'\n\nfunction App() {\n  const [eventData, setEventData] = useState([])\n  const [loading, setLoading] = useState(false)\n\n  useEffect(() => {\n    const fetchEvents = async () => {\n      setLoading(true)\n      const res = await fetch('https://eonet.sci.gsfc.nasa.gov/api/v2.1/events')\n      const { events } = await res.json()\n\n      setEventData(events)\n      setLoading(false)\n    }\n\n    fetchEvents()\n  }, [])\n\n  return (\n    <div>\n      {/* <Header /> */}\n      { !loading ? <Map eventData={eventData} /> : <Loader/> }\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}